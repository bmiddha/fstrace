// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type openatPidTgidState struct {
	Pid      uint32
	Tgid     uint32
	Comm     [16]int8
	Nr       int16
	Ret      int8
	Dfd      int8
	Filename [4096]int8
	Flags    uint8
	Mode     uint8
	_        [2]byte
}

type openatScratchpad struct {
	State openatPidTgidState
	How   struct {
		Flags   uint64
		Mode    uint64
		Resolve uint64
	}
}

// loadOpenat returns the embedded CollectionSpec for openat.
func loadOpenat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OpenatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load openat: %w", err)
	}

	return spec, err
}

// loadOpenatObjects loads openat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*openatObjects
//	*openatPrograms
//	*openatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadOpenatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadOpenat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// openatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openatSpecs struct {
	openatProgramSpecs
	openatMapSpecs
	openatVariableSpecs
}

// openatProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openatProgramSpecs struct {
	TracepointSyscallsSysEnterCreat   *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_enter_creat"`
	TracepointSyscallsSysEnterOpen    *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_enter_open"`
	TracepointSyscallsSysEnterOpenat  *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_enter_openat"`
	TracepointSyscallsSysEnterOpenat2 *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_enter_openat2"`
	TracepointSyscallsSysExitCreat    *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_exit_creat"`
	TracepointSyscallsSysExitOpen     *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_exit_open"`
	TracepointSyscallsSysExitOpenat   *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_exit_openat"`
	TracepointSyscallsSysExitOpenat2  *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_exit_openat2"`
}

// openatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openatMapSpecs struct {
	EventRingbuf      *ebpf.MapSpec `ebpf:"event_ringbuf"`
	PidTgidStateMap   *ebpf.MapSpec `ebpf:"pid_tgid_state_map"`
	ScratchpadMap     *ebpf.MapSpec `ebpf:"scratchpad_map"`
	ScratchpadRingbuf *ebpf.MapSpec `ebpf:"scratchpad_ringbuf"`
}

// openatVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openatVariableSpecs struct {
	NS_DEV *ebpf.VariableSpec `ebpf:"NS_DEV"`
	NS_INO *ebpf.VariableSpec `ebpf:"NS_INO"`
}

// openatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadOpenatObjects or ebpf.CollectionSpec.LoadAndAssign.
type openatObjects struct {
	openatPrograms
	openatMaps
	openatVariables
}

func (o *openatObjects) Close() error {
	return _OpenatClose(
		&o.openatPrograms,
		&o.openatMaps,
	)
}

// openatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadOpenatObjects or ebpf.CollectionSpec.LoadAndAssign.
type openatMaps struct {
	EventRingbuf      *ebpf.Map `ebpf:"event_ringbuf"`
	PidTgidStateMap   *ebpf.Map `ebpf:"pid_tgid_state_map"`
	ScratchpadMap     *ebpf.Map `ebpf:"scratchpad_map"`
	ScratchpadRingbuf *ebpf.Map `ebpf:"scratchpad_ringbuf"`
}

func (m *openatMaps) Close() error {
	return _OpenatClose(
		m.EventRingbuf,
		m.PidTgidStateMap,
		m.ScratchpadMap,
		m.ScratchpadRingbuf,
	)
}

// openatVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadOpenatObjects or ebpf.CollectionSpec.LoadAndAssign.
type openatVariables struct {
	NS_DEV *ebpf.Variable `ebpf:"NS_DEV"`
	NS_INO *ebpf.Variable `ebpf:"NS_INO"`
}

// openatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadOpenatObjects or ebpf.CollectionSpec.LoadAndAssign.
type openatPrograms struct {
	TracepointSyscallsSysEnterCreat   *ebpf.Program `ebpf:"tracepoint_syscalls_sys_enter_creat"`
	TracepointSyscallsSysEnterOpen    *ebpf.Program `ebpf:"tracepoint_syscalls_sys_enter_open"`
	TracepointSyscallsSysEnterOpenat  *ebpf.Program `ebpf:"tracepoint_syscalls_sys_enter_openat"`
	TracepointSyscallsSysEnterOpenat2 *ebpf.Program `ebpf:"tracepoint_syscalls_sys_enter_openat2"`
	TracepointSyscallsSysExitCreat    *ebpf.Program `ebpf:"tracepoint_syscalls_sys_exit_creat"`
	TracepointSyscallsSysExitOpen     *ebpf.Program `ebpf:"tracepoint_syscalls_sys_exit_open"`
	TracepointSyscallsSysExitOpenat   *ebpf.Program `ebpf:"tracepoint_syscalls_sys_exit_openat"`
	TracepointSyscallsSysExitOpenat2  *ebpf.Program `ebpf:"tracepoint_syscalls_sys_exit_openat2"`
}

func (p *openatPrograms) Close() error {
	return _OpenatClose(
		p.TracepointSyscallsSysEnterCreat,
		p.TracepointSyscallsSysEnterOpen,
		p.TracepointSyscallsSysEnterOpenat,
		p.TracepointSyscallsSysEnterOpenat2,
		p.TracepointSyscallsSysExitCreat,
		p.TracepointSyscallsSysExitOpen,
		p.TracepointSyscallsSysExitOpenat,
		p.TracepointSyscallsSysExitOpenat2,
	)
}

func _OpenatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openat_bpfeb.o
var _OpenatBytes []byte
